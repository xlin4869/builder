<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="1" failures="3" skipped="0" tests="19" time="534.951" timestamp="2023-11-29T02:57:23.272314" hostname="LAPTOP-GD9TV0PR"><testcase classname="apps.api.tests.test_datasets" name="test_create_dataset" time="22.713" /><testcase classname="apps.api.tests.test_datasets" name="test_delete_dataset" time="1.398" /><testcase classname="apps.api.tests.test_datasets" name="test_get_dataset" time="23.123" /><testcase classname="apps.api.tests.test_datasets" name="test_update_dataset_with_annotated_data" time="41.288" /><testcase classname="apps.api.tests.test_datasets" name="test_update_dataset" time="81.156" /><testcase classname="apps.api.tests.test_datasets" name="test_update_dataset_preview" time="14.445" /><testcase classname="apps.api.tests.test_datasets" name="test_retrieve_document_segments" time="16.187" /><testcase classname="apps.api.tests.test_datasets" name="test_retrieve_document_segments_with_query" time="14.253" /><testcase classname="apps.api.tests.test_datasets" name="test_add_segments" time="146.714"><failure message="assert 400 == 200&#10; +  where 400 = &lt;Response [400 Bad Request]&gt;.status_code">def test_add_segments():
        test_dataset_id = 'test_add_segment'
        test_document_uid = "test_add_segment_uid"
        test_dataset = Dataset(
            id=test_dataset_id,
            documents=[
                {
                    "uid": test_document_uid,
                    "url": "https://storage.googleapis.com/context-builder/public-tmp/J6D08G9I5ja0.pdf",
                    "type": "pdf",
                    "split_option": {
                        "split_type": "character",
                        "chunk_size": 500,
                        "chunk_overlap": 0
                    }
                }
            ]
        )
        dataset_manager.save_dataset(test_dataset)
        # add segments
        new_segment_content = "新添加的段落内容。"
        response = client.post(
            f"/v1/datasets/{test_dataset_id}/document/{test_document_uid}/segment/",
            json={"content": new_segment_content}
        )
&gt;       assert response.status_code == 200
E       assert 400 == 200
E        +  where 400 = &lt;Response [400 Bad Request]&gt;.status_code

apps/api/tests/test_datasets.py:324: AssertionError</failure></testcase><testcase classname="apps.api.tests.test_datasets" name="test_edit_segment" time="26.233" /><testcase classname="apps.api.tests.test_datasets" name="test_delete_segment" time="52.629" /><testcase classname="apps.api.tests.test_datasets" name="test_dataset_integration" time="63.897" /><testcase classname="apps.api.tests.test_models" name="test_get_model" time="1.683" /><testcase classname="apps.api.tests.test_models" name="test_get_models" time="0.032"><failure message="assert 405 == 200&#10; +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code">def test_get_models():
        """
        Tests the GET /v1/models endpoint.
        The endpoint is supposed to return all models.
        """
        response = client.get("/v1/models")
    
        # The endpoint should return with a 200 OK status
&gt;       assert response.status_code == 200
E       assert 405 == 200
E        +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code

apps/api/tests/test_models.py:44: AssertionError</failure></testcase><testcase classname="apps.api.tests.test_models" name="test_create_model" time="0.757" /><testcase classname="apps.api.tests.test_models" name="test_update_model" time="0.770" /><testcase classname="apps.api.tests.test_models" name="test_delete_model" time="0.865" /><testcase classname="apps.api.tests.test_workflow" name="test_qa_chat" time="0.025"><error message="failed on setup with &quot;AttributeError: 'DatasetManager' object has no attribute 'update_dataset'&quot;">@pytest.fixture
    def test_data():
        llm1 = LLM(
            name="gpt-3.5-turbo",
            max_tokens=1000,
            temperature=0.9,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            api_key=OPENAI_API_KEY,
        )
        document = Document(
            uid="test_document_1",
            url="https://storage.googleapis.com/context-builder/public-tmp/kxPvcLZ1BzRC.pdf",
            type="pdf",
            page_size=2,
        )
        document.page_size = 2
        template1 = Prompt(
            template="""Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.
    
    Follow Up Input: {question}
    Standalone question:"""
        )
        dataset = Dataset(
            id="test_dataset_1",
            documents=[document],
        )
    
        updated_dict = dataset.dict()
        updated_dict.pop("id")
&gt;       dataset_manager.update_dataset(dataset.id, updated_dict)
E       AttributeError: 'DatasetManager' object has no attribute 'update_dataset'

apps/api/tests/test_workflow.py:48: AttributeError</error></testcase><testcase classname="apps.api.tests.test_workflow" name="test_conversation_chat" time="7.928"><failure message="AttributeError: 'NoneType' object has no attribute 'is_set'">test_conversation = 'test_model_3', capfd = &lt;_pytest.capture.CaptureFixture object at 0x7fd2b13c8250&gt;

    @pytest.mark.asyncio
    async def test_conversation_chat(test_conversation, capfd):
        session_id = uuid.uuid4().hex
        session_state_manager.save_session_state(
            session_id=session_id, model_id=test_conversation
        )
&gt;       async for response in send_message(
            [
                Messages(content="tell me the ans of 2^10", role="user"),
            ],
            session_id,
            filt=True,
        ):

apps/api/tests/test_workflow.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

messages_contents = [Messages(role='user', content='tell me the ans of 2^10')], session_id = 'd406a203d8ea4db5a8862cc164ee7ff6', filt = True
start_time = None, disconnect_event = None

    async def send_message(
        messages_contents: List[MessagesContent],
        session_id: str,
        filt=False,
        start_time=None,
        disconnect_event: asyncio.Event = None,
    ) -&gt; AsyncIterable[str]:
        messages = []
        for message_content in messages_contents:
            if message_content.role == "user":
                messages.append(HumanMessage(content=message_content.content))
            elif message_content.role == "system":
                messages.append(SystemMessage(content=message_content.content))
            elif message_content.role == "assistant":
                messages.append(AIMessage(content=message_content.content))
            else:
                raise HTTPException(
                    status_code=400, detail=f"Invalid role: {message_content.role}"
                )
    
        model_id = session_state_manager.get_model_id(session_id)
        models = model_manager.get_models(model_id)
        if not models:
            raise HTTPException(
                status_code=400, detail=f"Model {model_id} not found in model manager"
            )
        if len(models) &gt; 1:
            raise HTTPException(
                status_code=400,
                detail=f"Model {model_id} has {len(models)} models in model manager",
            )
        model = models[0]
        workflow = session_state_manager.get_workflow(session_id, model, disconnect_event)
    
        async def wrap_done(fn: Awaitable, event: asyncio.Event):
            try:
                await fn
    
            except Exception as e:
                logger.exception(e)
                raise e
            finally:
                event.set()
    
        try:
            task = asyncio.create_task(
                wrap_done(workflow.agenerate(messages), workflow.context.done)
            )
            yield wrap_token(CHUNK_DATA, model_id, session_id, filt=filt)
    
            async for token in workflow.context.aiter():
                if start_time:
                    duration_time = time.time() - start_time
                    start_time = None
                    logger.info(f"duration_time: {duration_time}")
                    logsang_handler = LogsnagHandler()
                    asyncio.create_task(
                        logsang_handler.send_log(
                            channel="chat",
                            event="completion",
                            description=f"model_id:{model_id}, response_time: {duration_time}",
                            tags={
                                "model-id": model_id,
                                "session-id": session_id,
                                "duration-time": duration_time,
                            },
                        )
                    )
                yield wrap_token(token, model_id, session_id, filt=filt)
            await task
        except Exception as e:
            logger.warning(e)
    
        if not filt:
            yield f"data: {json.dumps(CompletionsResponse(id=session_id, object='chat.completion.chunk', model=workflow.model.id, choices=[Choices(index=0, finish_reason='stop', delta={})]).dict())}\n\n"
            info = {
                "metadata": {
                    "token": {"total_tokens": workflow.cost_content.total_tokens},
                    "raw": workflow.io_traces,
                }
            }
            yield f"data: {json.dumps(info)}\n\n"
            if workflow.error_flags:
                info = {
                    "metadata": {"error": wrap_error(str(workflow.error_flags[0].args[0]))}
                }
                yield f"data: {json.dumps(info)}\n\n"
    
&gt;       if not workflow.disconnect_event.is_set():
E       AttributeError: 'NoneType' object has no attribute 'is_set'

apps/api/routers/chat.py:153: AttributeError</failure></testcase></testsuite></testsuites>